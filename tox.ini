# Tox is a generic virtualenv management and test command line tool. Its goal is to
# standardize testing in Python. We will be using it extensively in this course.

# Using Tox we can (on multiple operating systems):
# + Eliminate PYTHONPATH challenges when running scripts/tests
# + Eliminate virtualenv setup confusion
# + Streamline steps such as model training, model publishing


[tox]
envlist = test_package, typechecks, stylechecks, lint
skipsdist = True

[testenv]
install_command = pip install {opts} {packages}

passenv =
	TWINE_USERNAME
	TWINE_PASSWORD

[testenv:test_package]
deps =
	-rrequirements/test_requirements.txt

setenv =
	PYTHONPATH=.
	PYTHONHASHSEED=0

commands=
	pytest \
	-s \
	-vv \
	{posargs:tests/tests_pre_train/}
	python classification_model/train_pipeline.py
	pytest \
	-s \
	-vv \
	{posargs:tests/tests_post_train/}

[testenv:train]
envdir = {toxworkdir}/test_package
deps =
	{[testenv:test_package]deps}

setenv =
	{[testenv:test_package]setenv}

commands =
	python classification_model/train_pipeline.py

[testenv:fetch_data]
envdir = {toxworkdir}/test_package
deps=
	{[testenv:test_package]deps}

setenv=
	{[testenv:test_package]setenv}

commands=
	gdown --id 1Zzgy7lqPEQUJZteOrhbv1CHxATKhUyoA --output ./classification_model/datasets/data.zip
	unzip ./classification_model/datasets/data.zip -d ./classification_model/datasets


[testenv:publish_model]
whitelist_externals=bash
envdir = {toxworkdir}/test_package
deps =
	{[testenv:test_package]deps}

setenv=
	{[testenv:test_package]setenv}

commands=
	bash -c "chmod +x ./publish_model.sh"
	bash -c "./publish_model.sh ."


[testenv:differential_past] # not meant to be run locally!
envdir = {toxworkdir}/test_package
deps =
	-rrequirements/diff_test_requirements.txt

setenv =
	PYTHONPATH=./classification_model
	PYTHONHASHSEED=0

commands=
	python tests/capture_model_predictions.py ./classification_model

[testenv:differential_present] # not meant to be run locally!
envdir = {toxworkdir}/test_package
deps=
	{[testenv:test_package]deps}

setenv=
	{[testenv:test_package]setenv}

commands=
	python classification_model/train_pipeline.py
	pytest \
	-s \
	-vv \
	{posargs:tests/tests_differential}


[testenv:typechecks]
envdir = {toxworkdir}/test_package

deps =
	{[testenv:test_package]deps}

commands = {posargs:mypy classification_model}


[testenv:stylechecks]
envdir = {toxworkdir}/test_package

deps =
	{[testenv:test_package]deps}

commands = {posargs:flake8 classification_model tests}


[testenv:lint]
envdir = {toxworkdir}/test_package

deps =
	{[testenv:test_package]deps}

commands =
	isort classification_model tests
	black classification_model tests
	mypy classification_model
	flake8 classification_model

[flake8]
exclude = .git,env
max-line-length = 90
